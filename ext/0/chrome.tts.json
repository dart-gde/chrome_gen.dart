{"dependencies":[{"kind":"library","id":"chrome.src.common_exp","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChromeApi","id":"ChromeApi","comment":"\nA common super class for the Chrome APIs.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","comment":"\nReturns true if the API is available. The common causes of an API not being\navilable are:\n\n * a permission is missing in the application's manifest.json file\n * the API is defined on a newer version of Chrome then the current runtime\n","line":"40"}],"line":"32"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChromeObject","id":"ChromeObject","comment":"\nThe abstract superclass of objects that can hold [JsObject] proxies.\n","children":[{"returnType":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"method","name":"toJs","id":"toJs0()","line":"24"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"26"},{"isFinal":true,"kind":"variable","name":"jsProxy","id":"jsProxy","line":"10"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreate a new instance of a `ChromeObject`, which creates and delegates to\na JsObject proxy.\n","line":"16"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","comment":"\nCreate a new instance of a `ChromeObject`, which delegates to the given\nJsObject proxy.\n","children":[{"initializedField":{"name":"jsProxy","refId":"chrome.src.common_exp/ChromeObject/jsProxy"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"22"}],"line":"9"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/src/common_exp.dart","line":"2"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"chrome.tts","comment":"\nUse the `chrome.tts` API to play synthesized text-to-speech (TTS). See also\nthe related\n[ttsEngine](http://developer.chrome.com/extensions/ttsEngine.html) API, which\nallows an extension to implement a speech engine.\n","children":[{"returnType":{"name":"TtsEvent","refId":"chrome.tts/TtsEvent"},"kind":"method","name":"_createTtsEvent","id":"_createTtsEvent1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"302"},{"returnType":{"name":"TtsVoice","refId":"chrome.tts/TtsVoice"},"kind":"method","name":"_createTtsVoice","id":"_createTtsVoice1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"301"},{"ref":{"name":"ChromeTts","refId":"chrome.tts/ChromeTts"},"isFinal":true,"kind":"variable","name":"tts","id":"tts","comment":"\nAccessor for the `chrome.tts` namespace.\n","line":"16"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"TtsSpeakParams","id":"TtsSpeakParams","children":[{"isSetter":true,"kind":"method","name":"enqueue=","id":"enqueue=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"226"},{"isSetter":true,"kind":"method","name":"voiceName=","id":"voiceName=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"233"},{"isSetter":true,"kind":"method","name":"extensionId=","id":"extensionId=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"239"},{"isSetter":true,"kind":"method","name":"lang=","id":"lang=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"246"},{"isSetter":true,"kind":"method","name":"gender=","id":"gender=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"253"},{"isSetter":true,"kind":"method","name":"rate=","id":"rate=1()","children":[{"kind":"param","name":"value","id":"value"}],"line":"264"},{"isSetter":true,"kind":"method","name":"pitch=","id":"pitch=1()","children":[{"kind":"param","name":"value","id":"value"}],"line":"271"},{"isSetter":true,"kind":"method","name":"volume=","id":"volume=1()","children":[{"kind":"param","name":"value","id":"value"}],"line":"278"},{"isSetter":true,"kind":"method","name":"requiredEventTypes=","id":"requiredEventTypes=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"value","id":"value"}],"line":"284"},{"isSetter":true,"kind":"method","name":"desiredEventTypes=","id":"desiredEventTypes=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"value","id":"value"}],"line":"291"},{"isSetter":true,"kind":"method","name":"onEvent=","id":"onEvent=1()","children":[{"kind":"param","name":"value","id":"value"}],"line":"298"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"enqueue","id":"enqueue","comment":"\nIf true, enqueues this utterance if TTS is already in progress. If false\n(the default), interrupts any current speech and flushes the speech queue\nbefore speaking this new utterance.\n","line":"225"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"voiceName","id":"voiceName","comment":"\nThe name of the voice to use for synthesis. If empty, uses any available\nvoice.\n","line":"232"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"extensionId","id":"extensionId","comment":"\nThe extension ID of the speech engine to use, if known.\n","line":"238"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"lang","id":"lang","comment":"\nThe language to be used for synthesis, in the form _language_-_region_.\nExamples: 'en', 'en-US', 'en-GB', 'zh-CN'.\n","line":"245"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"gender","id":"gender","comment":"\nGender of voice for synthesized speech.\nenum of `male`, `female`\n","line":"252"},{"kind":"property","name":"rate","id":"rate","comment":"\nSpeaking rate relative to the default rate for this voice. 1.0 is the\ndefault rate, normally around 180 to 220 words per minute. 2.0 is twice as\nfast, and 0.5 is half as fast. Values below 0.1 or above 10.0 are strictly\ndisallowed, but many voices will constrain the minimum and maximum rates\nfurther-for example a particular voice may not actually speak faster than 3\ntimes normal even if you specify a value larger than 3.0.\n","line":"263"},{"kind":"property","name":"pitch","id":"pitch","comment":"\nSpeaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being\nhighest. 1.0 corresponds to a voice's default pitch.\n","line":"270"},{"kind":"property","name":"volume","id":"volume","comment":"\nSpeaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being\nhighest, with a default of 1.0.\n","line":"277"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"requiredEventTypes","id":"requiredEventTypes","comment":"\nThe TTS event types the voice must support.\n","line":"283"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"desiredEventTypes","id":"desiredEventTypes","comment":"\nThe TTS event types that you are interested in listening to. If missing,\nall event types may be sent.\n","line":"290"},{"kind":"property","name":"onEvent","id":"onEvent","comment":"\nThis function is called with events that occur in the process of speaking\nthe utterance.\n","line":"297"},{"kind":"constructor","name":"","id":"11()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"enqueue","id":"enqueue"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"voiceName","id":"voiceName"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"extensionId","id":"extensionId"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"lang","id":"lang"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"gender","id":"gender"},{"isOptional":true,"isNamed":true,"kind":"param","name":"rate","id":"rate"},{"isOptional":true,"isNamed":true,"kind":"param","name":"pitch","id":"pitch"},{"isOptional":true,"isNamed":true,"kind":"param","name":"volume","id":"volume"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"requiredEventTypes","id":"requiredEventTypes"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"desiredEventTypes","id":"desiredEventTypes"},{"isOptional":true,"isNamed":true,"kind":"param","name":"onEvent","id":"onEvent"}],"line":"205"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"218"}],"line":"204"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"TtsVoice","id":"TtsVoice","comment":"\nA description of a voice available for speech synthesis.\n","children":[{"isSetter":true,"kind":"method","name":"voiceName=","id":"voiceName=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"175"},{"isSetter":true,"kind":"method","name":"lang=","id":"lang=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"182"},{"isSetter":true,"kind":"method","name":"gender=","id":"gender=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"189"},{"isSetter":true,"kind":"method","name":"extensionId=","id":"extensionId=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"195"},{"isSetter":true,"kind":"method","name":"eventTypes=","id":"eventTypes=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"value","id":"value"}],"line":"201"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"voiceName","id":"voiceName","comment":"\nThe name of the voice.\n","line":"174"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"lang","id":"lang","comment":"\nThe language that this voice supports, in the form _language_-_region_.\nExamples: 'en', 'en-US', 'en-GB', 'zh-CN'.\n","line":"181"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"gender","id":"gender","comment":"\nThis voice's gender.\nenum of `male`, `female`\n","line":"188"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"extensionId","id":"extensionId","comment":"\nThe ID of the extension providing this voice.\n","line":"194"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"eventTypes","id":"eventTypes","comment":"\nAll of the callback event types that this voice is capable of sending.\n","line":"200"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"voiceName","id":"voiceName"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"lang","id":"lang"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"gender","id":"gender"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"extensionId","id":"extensionId"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"eventTypes","id":"eventTypes"}],"line":"162"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"169"}],"line":"161"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"TtsEvent","id":"TtsEvent","comment":"\nAn event from the TTS engine to communicate the status of an utterance.\n","children":[{"isSetter":true,"kind":"method","name":"type=","id":"type=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"143"},{"isSetter":true,"kind":"method","name":"charIndex=","id":"charIndex=1()","children":[{"kind":"param","name":"value","id":"value"}],"line":"149"},{"isSetter":true,"kind":"method","name":"errorMessage=","id":"errorMessage=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"155"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"type","id":"type","comment":"\nThe type can be 'start' as soon as speech has started, 'word' when a word\nboundary is reached, 'sentence' when a sentence boundary is reached,\n'marker' when an SSML mark element is reached, 'end' when the end of the\nutterance is reached, 'interrupted' when the utterance is stopped or\ninterrupted before reaching the end, 'cancelled' when it's removed from the\nqueue before ever being synthesized, or 'error' when any other error\noccurs. When pausing speech, a 'pause' event is fired if a particular\nutterance is paused in the middle, and 'resume' if an utterance resumes\nspeech. Note that pause and resume events may not fire if speech is paused\nin-between utterances.\nenum of `start`, `end`, `word`, `sentence`, `marker`, `interrupted`,\n`cancelled`, `error`, `pause`, `resume`\n","line":"142"},{"kind":"property","name":"charIndex","id":"charIndex","comment":"\nThe index of the current character in the utterance.\n","line":"148"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"errorMessage","id":"errorMessage","comment":"\nThe error description, if the event type is 'error'.\n","line":"154"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"type","id":"type"},{"isOptional":true,"isNamed":true,"kind":"param","name":"charIndex","id":"charIndex"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"errorMessage","id":"errorMessage"}],"line":"121"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"126"}],"line":"120"},{"superclass":{"name":"ChromeApi","refId":"chrome.src.common_exp/ChromeApi"},"kind":"class","name":"ChromeTts","id":"ChromeTts","children":[{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"speak","id":"speak2()","comment":"\nSpeaks text using a text-to-speech engine.\n\n[utterance] The text to speak, either plain text or a complete, well-formed\nSSML document. Speech engines that do not support SSML will strip away the\ntags and speak the text. The maximum length of the text is 32,768\ncharacters.\n\n[options] The speech options.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"utterance","id":"utterance"},{"ref":{"name":"TtsSpeakParams","refId":"chrome.tts/TtsSpeakParams"},"isOptional":true,"kind":"param","name":"options","id":"options"}],"line":"35"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"stop","id":"stop0()","comment":"\nStops any current speech and flushes the queue of any pending utterances.\nIn addition, if speech was paused, it will now be un-paused for the next\ncall to speak.\n","line":"48"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"pause","id":"pause0()","comment":"\nPauses speech synthesis, potentially in the middle of an utterance. A call\nto resume or stop will un-pause speech.\n","line":"58"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"resume","id":"resume0()","comment":"\nIf speech was paused, resumes speaking where it left off.\n","line":"67"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"isSpeaking","id":"isSpeaking0()","comment":"\nChecks whether the engine is currently speaking. On Mac OS X, the result is\ntrue whenever the system speech engine is speaking, even if the speech\nwasn't initiated by Chrome.\n\nReturns:\nTrue if speaking, false otherwise.\n","line":"81"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"TtsVoice","refId":"chrome.tts/TtsVoice"}]}]},"kind":"method","name":"getVoices","id":"getVoices0()","comment":"\nGets an array of all available voices.\n\nReturns:\nArray of [TtsVoice] objects representing the available voices for speech\nsynthesis.\n","line":"96"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_throwNotAvailable","id":"_throwNotAvailable0()","isPrivate":true,"line":"112"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","line":"23"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"TtsEvent","refId":"chrome.tts/TtsEvent"}]},"kind":"property","name":"onEvent","id":"onEvent","comment":"\nUsed to pass events back to the function calling speak().\n","line":"107"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_tts","id":"_tts","isPrivate":true,"line":"19"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"TtsEvent","refId":"chrome.tts/TtsEvent"}]},"isFinal":true,"kind":"variable","name":"_onEvent","id":"_onEvent","isPrivate":true,"line":"109"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"21"}],"line":"18"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/gen/tts.dart","line":"9"}