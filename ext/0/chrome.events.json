{"dependencies":[{"kind":"library","id":"chrome.src.common_exp","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChromeApi","id":"ChromeApi","comment":"\nA common super class for the Chrome APIs.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","comment":"\nReturns true if the API is available. The common causes of an API not being\navilable are:\n\n * a permission is missing in the application's manifest.json file\n * the API is defined on a newer version of Chrome then the current runtime\n","line":"40"}],"line":"32"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChromeObject","id":"ChromeObject","comment":"\nThe abstract superclass of objects that can hold [JsObject] proxies.\n","children":[{"returnType":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"method","name":"toJs","id":"toJs0()","line":"24"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"26"},{"isFinal":true,"kind":"variable","name":"jsProxy","id":"jsProxy","line":"10"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreate a new instance of a `ChromeObject`, which creates and delegates to\na JsObject proxy.\n","line":"16"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","comment":"\nCreate a new instance of a `ChromeObject`, which delegates to the given\nJsObject proxy.\n","children":[{"initializedField":{"name":"jsProxy","refId":"chrome.src.common_exp/ChromeObject/jsProxy"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"22"}],"line":"9"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/src/common_exp.dart","line":"2"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"chrome.events","comment":"\nUse the `chrome.events` API to notify you when something interesting happens.\n","children":[{"returnType":{"name":"Rule","refId":"chrome.events/Rule"},"kind":"method","name":"_createRule","id":"_createRule1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"328"},{"ref":{"name":"ChromeEvents","refId":"chrome.events/ChromeEvents"},"isFinal":true,"kind":"variable","name":"events","id":"events","comment":"\nAccessor for the `chrome.events` namespace.\n","line":"13"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"UrlFilter","id":"UrlFilter","comment":"\nFilters URLs for various criteria. See [event filtering](#filtered). All\ncriteria are case sensitive.\n","children":[{"isSetter":true,"kind":"method","name":"hostContains=","id":"hostContains=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"194"},{"isSetter":true,"kind":"method","name":"hostEquals=","id":"hostEquals=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"200"},{"isSetter":true,"kind":"method","name":"hostPrefix=","id":"hostPrefix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"206"},{"isSetter":true,"kind":"method","name":"hostSuffix=","id":"hostSuffix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"212"},{"isSetter":true,"kind":"method","name":"pathContains=","id":"pathContains=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"218"},{"isSetter":true,"kind":"method","name":"pathEquals=","id":"pathEquals=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"224"},{"isSetter":true,"kind":"method","name":"pathPrefix=","id":"pathPrefix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"230"},{"isSetter":true,"kind":"method","name":"pathSuffix=","id":"pathSuffix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"236"},{"isSetter":true,"kind":"method","name":"queryContains=","id":"queryContains=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"242"},{"isSetter":true,"kind":"method","name":"queryEquals=","id":"queryEquals=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"248"},{"isSetter":true,"kind":"method","name":"queryPrefix=","id":"queryPrefix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"254"},{"isSetter":true,"kind":"method","name":"querySuffix=","id":"querySuffix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"260"},{"isSetter":true,"kind":"method","name":"urlContains=","id":"urlContains=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"268"},{"isSetter":true,"kind":"method","name":"urlEquals=","id":"urlEquals=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"276"},{"isSetter":true,"kind":"method","name":"urlMatches=","id":"urlMatches=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"285"},{"isSetter":true,"kind":"method","name":"originAndPathMatches=","id":"originAndPathMatches=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"294"},{"isSetter":true,"kind":"method","name":"urlPrefix=","id":"urlPrefix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"302"},{"isSetter":true,"kind":"method","name":"urlSuffix=","id":"urlSuffix=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"310"},{"isSetter":true,"kind":"method","name":"schemes=","id":"schemes=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"value","id":"value"}],"line":"317"},{"isSetter":true,"kind":"method","name":"ports=","id":"ports=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"param","name":"value","id":"value"}],"line":"325"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"hostContains","id":"hostContains","comment":"\nMatches if the host name of the URL contains a specified string. To test\nwhether a host name component has a prefix 'foo', use hostContains: '.foo'.\nThis matches 'www.foobar.com' and 'foo.com', because an implicit dot is\nadded at the beginning of the host name. Similarly, hostContains can be\nused to match against component suffix ('foo.') and to exactly match\nagainst components ('.foo.'). Suffix- and exact-matching for the last\ncomponents need to be done separately using hostSuffix, because no implicit\ndot is added at the end of the host name.\n","line":"193"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"hostEquals","id":"hostEquals","comment":"\nMatches if the host name of the URL is equal to a specified string.\n","line":"199"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"hostPrefix","id":"hostPrefix","comment":"\nMatches if the host name of the URL starts with a specified string.\n","line":"205"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"hostSuffix","id":"hostSuffix","comment":"\nMatches if the host name of the URL ends with a specified string.\n","line":"211"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"pathContains","id":"pathContains","comment":"\nMatches if the path segment of the URL contains a specified string.\n","line":"217"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"pathEquals","id":"pathEquals","comment":"\nMatches if the path segment of the URL is equal to a specified string.\n","line":"223"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"pathPrefix","id":"pathPrefix","comment":"\nMatches if the path segment of the URL starts with a specified string.\n","line":"229"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"pathSuffix","id":"pathSuffix","comment":"\nMatches if the path segment of the URL ends with a specified string.\n","line":"235"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"queryContains","id":"queryContains","comment":"\nMatches if the query segment of the URL contains a specified string.\n","line":"241"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"queryEquals","id":"queryEquals","comment":"\nMatches if the query segment of the URL is equal to a specified string.\n","line":"247"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"queryPrefix","id":"queryPrefix","comment":"\nMatches if the query segment of the URL starts with a specified string.\n","line":"253"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"querySuffix","id":"querySuffix","comment":"\nMatches if the query segment of the URL ends with a specified string.\n","line":"259"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"urlContains","id":"urlContains","comment":"\nMatches if the URL (without fragment identifier) contains a specified\nstring. Port numbers are stripped from the URL if they match the default\nport number.\n","line":"267"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"urlEquals","id":"urlEquals","comment":"\nMatches if the URL (without fragment identifier) is equal to a specified\nstring. Port numbers are stripped from the URL if they match the default\nport number.\n","line":"275"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"urlMatches","id":"urlMatches","comment":"\nMatches if the URL (without fragment identifier) matches a specified\nregular expression. Port numbers are stripped from the URL if they match\nthe default port number. The regular expressions use the [RE2\nsyntax](http://code.google.com/p/re2/wiki/Syntax).\n","line":"284"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"originAndPathMatches","id":"originAndPathMatches","comment":"\nMatches if the URL without query segment and fragment identifier matches a\nspecified regular expression. Port numbers are stripped from the URL if\nthey match the default port number. The regular expressions use the [RE2\nsyntax](http://code.google.com/p/re2/wiki/Syntax).\n","line":"293"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"urlPrefix","id":"urlPrefix","comment":"\nMatches if the URL (without fragment identifier) starts with a specified\nstring. Port numbers are stripped from the URL if they match the default\nport number.\n","line":"301"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"urlSuffix","id":"urlSuffix","comment":"\nMatches if the URL (without fragment identifier) ends with a specified\nstring. Port numbers are stripped from the URL if they match the default\nport number.\n","line":"309"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"schemes","id":"schemes","comment":"\nMatches if the scheme of the URL is equal to any of the schemes specified\nin the array.\n","line":"316"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"property","name":"ports","id":"ports","comment":"\nMatches if the port of the URL is contained in any of the specified port\nlists. For example `[80, 443, [1000, 1200]]` matches all requests on port\n80, 443 and in the range 1000-1200.\n","line":"324"},{"kind":"constructor","name":"","id":"20()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"hostContains","id":"hostContains"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"hostEquals","id":"hostEquals"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"hostPrefix","id":"hostPrefix"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"hostSuffix","id":"hostSuffix"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"pathContains","id":"pathContains"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"pathEquals","id":"pathEquals"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"pathPrefix","id":"pathPrefix"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"pathSuffix","id":"pathSuffix"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"queryContains","id":"queryContains"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"queryEquals","id":"queryEquals"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"queryPrefix","id":"queryPrefix"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"querySuffix","id":"querySuffix"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"urlContains","id":"urlContains"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"urlEquals","id":"urlEquals"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"urlMatches","id":"urlMatches"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"originAndPathMatches","id":"originAndPathMatches"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"urlPrefix","id":"urlPrefix"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"urlSuffix","id":"urlSuffix"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"schemes","id":"schemes"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"isOptional":true,"isNamed":true,"kind":"param","name":"ports","id":"ports"}],"line":"159"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"181"}],"line":"158"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"ChromeEvent","id":"ChromeEvent","comment":"\nAn object which allows the addition and removal of listeners for a Chrome\nevent.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"addListener","id":"addListener0()","comment":"\nRegisters an event listener _callback_ to an event.\n","line":"82"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"removeListener","id":"removeListener0()","comment":"\nDeregisters an event listener _callback_ from an event.\n","line":"91"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasListener","id":"hasListener1()","children":[{"kind":"param","name":"callback","id":"callback"}],"line":"97"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasListeners","id":"hasListeners0()","line":"101"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"Rule","refId":"chrome.events/Rule"}]}]},"kind":"method","name":"addRules","id":"addRules2()","comment":"\nRegisters rules to handle events.\n\n[eventName] Name of the event this function affects.\n\n[rules] Rules to be registered. These do not replace previously registered\nrules.\n\nReturns:\nRules that were registered, the optional parameters are filled with values.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"eventName","id":"eventName"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Rule","refId":"chrome.events/Rule"}]},"kind":"param","name":"rules","id":"rules"}],"line":"116"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"Rule","refId":"chrome.events/Rule"}]}]},"kind":"method","name":"getRules","id":"getRules2()","comment":"\nReturns currently registered rules.\n\n[eventName] Name of the event this function affects.\n\n[ruleIdentifiers] If an array is passed, only rules with identifiers\ncontained in this array are returned.\n\nReturns:\nRules that were registered, the optional parameters are filled with values.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"eventName","id":"eventName"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"ruleIdentifiers","id":"ruleIdentifiers"}],"line":"133"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"removeRules","id":"removeRules2()","comment":"\nUnregisters currently registered rules.\n\n[eventName] Name of the event this function affects.\n\n[ruleIdentifiers] If an array is passed, only rules with identifiers\ncontained in this array are unregistered.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"eventName","id":"eventName"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"ruleIdentifiers","id":"ruleIdentifiers"}],"line":"147"},{"kind":"constructor","name":"","id":"0()","line":"76"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"77"}],"line":"75"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"Rule","id":"Rule","comment":"\nDescription of a declarative rule for handling events.\n","children":[{"isSetter":true,"kind":"method","name":"id=","id":"id=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"44"},{"isSetter":true,"kind":"method","name":"tags=","id":"tags=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"value","id":"value"}],"line":"50"},{"isSetter":true,"kind":"method","name":"conditions=","id":"conditions=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"param","name":"value","id":"value"}],"line":"56"},{"isSetter":true,"kind":"method","name":"actions=","id":"actions=1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"param","name":"value","id":"value"}],"line":"62"},{"isSetter":true,"kind":"method","name":"priority=","id":"priority=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"68"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"id","id":"id","comment":"\nOptional identifier that allows referencing this rule.\n","line":"43"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"tags","id":"tags","comment":"\nTags can be used to annotate rules and perform operations on sets of rules.\n","line":"49"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"property","name":"conditions","id":"conditions","comment":"\nList of conditions that can trigger the actions.\n","line":"55"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"property","name":"actions","id":"actions","comment":"\nList of actions that are triggered if one of the condtions is fulfilled.\n","line":"61"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"priority","id":"priority","comment":"\nOptional priority of this rule. Defaults to 100.\n","line":"67"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"tags","id":"tags"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"isOptional":true,"isNamed":true,"kind":"param","name":"conditions","id":"conditions"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"isOptional":true,"isNamed":true,"kind":"param","name":"actions","id":"actions"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"priority","id":"priority"}],"line":"31"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"38"}],"line":"30"},{"superclass":{"name":"ChromeApi","refId":"chrome.src.common_exp/ChromeApi"},"kind":"class","name":"ChromeEvents","id":"ChromeEvents","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_throwNotAvailable","id":"_throwNotAvailable0()","isPrivate":true,"line":"22"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","line":"20"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_events","id":"_events","isPrivate":true,"line":"16"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"18"}],"line":"15"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/gen/events.dart","line":"6"}