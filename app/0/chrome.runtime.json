{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","id":"chrome.src.common_exp","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChromeApi","id":"ChromeApi","comment":"\nA common super class for the Chrome APIs.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","comment":"\nReturns true if the API is available. The common causes of an API not being\navilable are:\n\n * a permission is missing in the application's manifest.json file\n * the API is defined on a newer version of Chrome then the current runtime\n","line":"40"}],"line":"32"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChromeObject","id":"ChromeObject","comment":"\nThe abstract superclass of objects that can hold [JsObject] proxies.\n","children":[{"returnType":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"method","name":"toJs","id":"toJs0()","line":"24"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"26"},{"isFinal":true,"kind":"variable","name":"jsProxy","id":"jsProxy","line":"10"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreate a new instance of a `ChromeObject`, which creates and delegates to\na JsObject proxy.\n","line":"16"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","comment":"\nCreate a new instance of a `ChromeObject`, which delegates to the given\nJsObject proxy.\n","children":[{"initializedField":{"name":"jsProxy","refId":"chrome.src.common_exp/ChromeObject/jsProxy"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"22"}],"line":"9"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/src/common_exp.dart","line":"2"}],"kind":"library","id":"chrome.runtime","comment":"\nUse the `chrome.runtime` API to retrieve the background page, return details\nabout the manifest, and listen for and respond to events in the app or\nextension lifecycle. You can also use this API to convert the relative path\nof URLs to fully-qualified URLs.\n","children":[{"returnType":{"name":"Tab","refId":"chrome.tabs/Tab"},"kind":"method","name":"_createTab","id":"_createTab1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"553"},{"returnType":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"kind":"method","name":"_createMessageSender","id":"_createMessageSender1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"552"},{"returnType":{"name":"ChromeEvent","refId":"chrome.events/ChromeEvent"},"kind":"method","name":"_createEvent","id":"_createEvent1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"551"},{"returnType":{"name":"OnMessageExternalEvent","refId":"chrome.runtime/OnMessageExternalEvent"},"kind":"method","name":"_createOnMessageExternalEvent","id":"_createOnMessageExternalEvent3()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"sender","id":"sender"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"sendResponse","id":"sendResponse"}],"isPrivate":true,"line":"549"},{"returnType":{"name":"OnMessageEvent","refId":"chrome.runtime/OnMessageEvent"},"kind":"method","name":"_createOnMessageEvent","id":"_createOnMessageEvent3()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"sender","id":"sender"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"sendResponse","id":"sendResponse"}],"isPrivate":true,"line":"547"},{"returnType":{"name":"DirectoryEntry","refId":"dart.dom.html/DirectoryEntry"},"kind":"method","name":"_createDirectoryEntry","id":"_createDirectoryEntry1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"546"},{"returnType":{"name":"Port","refId":"chrome.runtime/Port"},"kind":"method","name":"_createPort","id":"_createPort1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"545"},{"returnType":{"name":"Window","refId":"chrome.windows/Window"},"kind":"method","name":"_createWindow","id":"_createWindow1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"544"},{"returnType":{"name":"LastErrorRuntime","refId":"chrome.runtime/LastErrorRuntime"},"kind":"method","name":"_createLastErrorRuntime","id":"_createLastErrorRuntime1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"543"},{"ref":{"name":"ChromeRuntime","refId":"chrome.runtime/ChromeRuntime"},"isFinal":true,"kind":"variable","name":"runtime","id":"runtime","comment":"\nAccessor for the `chrome.runtime` namespace.\n","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"RequestUpdateCheckResult","id":"RequestUpdateCheckResult","comment":"\nThe return type for [requestUpdateCheck].\n","children":[{"returnType":{"name":"RequestUpdateCheckResult","refId":"chrome.runtime/RequestUpdateCheckResult"},"isStatic":true,"kind":"method","name":"_create","id":"_create2()","children":[{"kind":"param","name":"status","id":"status"},{"kind":"param","name":"details","id":"details"}],"isPrivate":true,"line":"533"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"status","id":"status","line":"537"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"variable","name":"details","id":"details","line":"538"},{"kind":"constructor","name":"_","id":"_2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"status","refId":"chrome.runtime/RequestUpdateCheckResult/status"},"kind":"param","name":"status","id":"status"},{"ref":{"name":"Map","refId":"dart.core/Map"},"initializedField":{"name":"details","refId":"chrome.runtime/RequestUpdateCheckResult/details"},"kind":"param","name":"details","id":"details"}],"isPrivate":true,"line":"540"}],"line":"532"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"RuntimeSendMessageParams","id":"RuntimeSendMessageParams","children":[{"isSetter":true,"kind":"method","name":"includeTlsChannelId=","id":"includeTlsChannelId=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"526"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"includeTlsChannelId","id":"includeTlsChannelId","comment":"\nWhether the TLS channel ID will be passed into onMessageExternal for\nprocesses that are listening for the connection event.\n","line":"525"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"includeTlsChannelId","id":"includeTlsChannelId"}],"line":"516"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"519"}],"line":"515"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"RuntimeConnectParams","id":"RuntimeConnectParams","children":[{"isSetter":true,"kind":"method","name":"name=","id":"name=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"505"},{"isSetter":true,"kind":"method","name":"includeTlsChannelId=","id":"includeTlsChannelId=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"512"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","comment":"\nWill be passed into onConnect for processes that are listening for the\nconnection event.\n","line":"504"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"includeTlsChannelId","id":"includeTlsChannelId","comment":"\nWhether the TLS channel ID will be passed into onConnectExternal for\nprocesses that are listening for the connection event.\n","line":"511"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"includeTlsChannelId","id":"includeTlsChannelId"}],"line":"494"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"498"}],"line":"493"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"MessageSender","id":"MessageSender","comment":"\nAn object containing information about the script context that sent a message\nor request.\n","children":[{"isSetter":true,"kind":"method","name":"tab=","id":"tab=1()","children":[{"ref":{"name":"Tab","refId":"chrome.tabs/Tab"},"kind":"param","name":"value","id":"value"}],"line":"469"},{"isSetter":true,"kind":"method","name":"id=","id":"id=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"475"},{"isSetter":true,"kind":"method","name":"url=","id":"url=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"483"},{"isSetter":true,"kind":"method","name":"tlsChannelId=","id":"tlsChannelId=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"490"},{"ref":{"name":"Tab","refId":"chrome.tabs/Tab"},"kind":"property","name":"tab","id":"tab","comment":"\nThe [tabs.Tab] which opened the connection, if any. This property will\n*only* be present when the connection was opened from a tab (including\ncontent scripts), and *only* if the receiver is an extension, not an app.\n","line":"468"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"id","id":"id","comment":"\nThe ID of the extension or app that opened the connection, if any.\n","line":"474"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"url","id":"url","comment":"\nThe URL of the page or frame that opened the connection, if any. This\nproperty will *only* be present when the connection was opened from a tab\nor content script.\n","line":"482"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"tlsChannelId","id":"tlsChannelId","comment":"\nThe TLS channel ID of the web page that opened the connection, if requested\nby the extension or app, and if available.\n","line":"489"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"Tab","refId":"chrome.tabs/Tab"},"isOptional":true,"isNamed":true,"kind":"param","name":"tab","id":"tab"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"url","id":"url"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"tlsChannelId","id":"tlsChannelId"}],"line":"455"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"461"}],"line":"454"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"Port","id":"Port","comment":"\nAn object which allows two way communication with other pages.\n","children":[{"isSetter":true,"kind":"method","name":"name=","id":"name=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"428"},{"isSetter":true,"kind":"method","name":"disconnect=","id":"disconnect=1()","children":[{"kind":"param","name":"value","id":"value"}],"line":"431"},{"isSetter":true,"kind":"method","name":"onDisconnect=","id":"onDisconnect=1()","children":[{"ref":{"name":"ChromeEvent","refId":"chrome.events/ChromeEvent"},"kind":"param","name":"value","id":"value"}],"line":"434"},{"isSetter":true,"kind":"method","name":"onMessage=","id":"onMessage=1()","children":[{"ref":{"name":"ChromeEvent","refId":"chrome.events/ChromeEvent"},"kind":"param","name":"value","id":"value"}],"line":"437"},{"isSetter":true,"kind":"method","name":"postMessage=","id":"postMessage=1()","children":[{"kind":"param","name":"value","id":"value"}],"line":"440"},{"isSetter":true,"kind":"method","name":"sender=","id":"sender=1()","children":[{"ref":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"kind":"param","name":"value","id":"value"}],"line":"447"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"427"},{"kind":"property","name":"disconnect","id":"disconnect","line":"430"},{"ref":{"name":"ChromeEvent","refId":"chrome.events/ChromeEvent"},"kind":"property","name":"onDisconnect","id":"onDisconnect","line":"433"},{"ref":{"name":"ChromeEvent","refId":"chrome.events/ChromeEvent"},"kind":"property","name":"onMessage","id":"onMessage","line":"436"},{"kind":"property","name":"postMessage","id":"postMessage","line":"439"},{"ref":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"kind":"property","name":"sender","id":"sender","comment":"\nThis property will <b>only</b> be present on ports passed to\nonConnect/onConnectExternal listeners.\n","line":"446"},{"kind":"constructor","name":"","id":"6()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name"},{"isOptional":true,"isNamed":true,"kind":"param","name":"disconnect","id":"disconnect"},{"ref":{"name":"ChromeEvent","refId":"chrome.events/ChromeEvent"},"isOptional":true,"isNamed":true,"kind":"param","name":"onDisconnect","id":"onDisconnect"},{"ref":{"name":"ChromeEvent","refId":"chrome.events/ChromeEvent"},"isOptional":true,"isNamed":true,"kind":"param","name":"onMessage","id":"onMessage"},{"isOptional":true,"isNamed":true,"kind":"param","name":"postMessage","id":"postMessage"},{"ref":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"isOptional":true,"isNamed":true,"kind":"param","name":"sender","id":"sender"}],"line":"417"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"425"}],"line":"416"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"LastErrorRuntime","id":"LastErrorRuntime","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"message","id":"message","comment":"\nDetails about the error which occurred.\n","line":"410"},{"kind":"constructor","name":"","id":"0()","line":"404"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"405"}],"line":"403"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"OnMessageExternalEvent","id":"OnMessageExternalEvent","comment":"\nFired when a message is sent from another extension/app. Cannot be used in a\ncontent script.\n","children":[{"isFinal":true,"kind":"variable","name":"message","id":"message","comment":"\nThe message sent by the calling script.\n`optional`\n\nThe message sent by the calling script.\n","line":"385"},{"ref":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"isFinal":true,"kind":"variable","name":"sender","id":"sender","line":"387"},{"isFinal":true,"kind":"variable","name":"sendResponse","id":"sendResponse","comment":"\nFunction to call (at most once) when you have a response. The argument\nshould be any JSON-ifiable object. If you have more than one `onMessage`\nlistener in the same document, then only one may send a response. This\nfunction becomes invalid when the event listener returns, unless you return\ntrue from the event listener to indicate you wish to send a response\nasynchronously (this will keep the message channel open to the other end\nuntil `sendResponse` is called).\n","line":"398"},{"kind":"constructor","name":"","id":"3()","children":[{"initializedField":{"name":"message","refId":"chrome.runtime/OnMessageExternalEvent/message"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"initializedField":{"name":"sender","refId":"chrome.runtime/OnMessageExternalEvent/sender"},"kind":"param","name":"sender","id":"sender"},{"initializedField":{"name":"sendResponse","refId":"chrome.runtime/OnMessageExternalEvent/sendResponse"},"kind":"param","name":"sendResponse","id":"sendResponse"}],"line":"400"}],"line":"378"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"OnMessageEvent","id":"OnMessageEvent","comment":"\nFired when a message is sent from either an extension process or a content\nscript.\n","children":[{"isFinal":true,"kind":"variable","name":"message","id":"message","comment":"\nThe message sent by the calling script.\n`optional`\n\nThe message sent by the calling script.\n","line":"356"},{"ref":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"isFinal":true,"kind":"variable","name":"sender","id":"sender","line":"358"},{"isFinal":true,"kind":"variable","name":"sendResponse","id":"sendResponse","comment":"\nFunction to call (at most once) when you have a response. The argument\nshould be any JSON-ifiable object. If you have more than one `onMessage`\nlistener in the same document, then only one may send a response. This\nfunction becomes invalid when the event listener returns, unless you return\ntrue from the event listener to indicate you wish to send a response\nasynchronously (this will keep the message channel open to the other end\nuntil `sendResponse` is called).\n","line":"369"},{"kind":"constructor","name":"","id":"3()","children":[{"initializedField":{"name":"message","refId":"chrome.runtime/OnMessageEvent/message"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"MessageSender","refId":"chrome.runtime/MessageSender"},"initializedField":{"name":"sender","refId":"chrome.runtime/OnMessageEvent/sender"},"kind":"param","name":"sender","id":"sender"},{"initializedField":{"name":"sendResponse","refId":"chrome.runtime/OnMessageEvent/sendResponse"},"kind":"param","name":"sendResponse","id":"sendResponse"}],"line":"371"}],"line":"349"},{"superclass":{"name":"ChromeApi","refId":"chrome.src.common_exp/ChromeApi"},"kind":"class","name":"ChromeRuntime","id":"ChromeRuntime","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Window","refId":"chrome.windows/Window"}]},"kind":"method","name":"getBackgroundPage","id":"getBackgroundPage0()","comment":"\nRetrieves the JavaScript 'window' object for the background page running\ninside the current extension/app. If the background page is an event page,\nthe system will ensure it is loaded before calling the callback. If there\nis no background page, an error is set.\n\nReturns:\nThe JavaScript 'window' object for the background page.\n","line":"48"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"getManifest","id":"getManifest0()","comment":"\nReturns details about the app or extension from the manifest. The object\nreturned is a serialization of the full [manifest file](manifest.html).\n\nReturns:\nThe manifest details.\n","line":"63"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getURL","id":"getURL1()","comment":"\nConverts a relative path within an app/extension install directory to a\nfully-qualified URL.\n\n[path] A path to a resource within an app/extension expressed relative to\nits install directory.\n\nReturns:\nThe fully-qualified URL to the resource.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"79"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setUninstallUrl","id":"setUninstallUrl1()","comment":"\nSets the URL to be visited upon uninstallation. This may be used to clean\nup server-side data, do analytics, and implement surveys. Maximum 255\ncharacters.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"url","id":"url"}],"line":"90"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reload","id":"reload0()","comment":"\nReloads the app or extension.\n","line":"99"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RequestUpdateCheckResult","refId":"chrome.runtime/RequestUpdateCheckResult"}]},"kind":"method","name":"requestUpdateCheck","id":"requestUpdateCheck0()","comment":"\nRequests an update check for this app/extension.\n\nReturns:\n[status] Result of the update check.\nenum of `throttled`, `no_update`, `update_available`\n[details] If an update is available, this contains more information about\nthe available update.\n","line":"114"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"restart","id":"restart0()","comment":"\nRestart the ChromeOS device when the app runs in kiosk mode. Otherwise,\nit's no-op.\n","line":"126"},{"returnType":{"name":"Port","refId":"chrome.runtime/Port"},"kind":"method","name":"connect","id":"connect2()","comment":"\nAttempts to connect to other listeners within the extension/app (such as\nthe background page), or other extensions/apps. This is useful for content\nscripts connecting to their extension processes. Note that this does not\nconnect to any listeners in a content script. Extensions may connect to\ncontent scripts embedded in tabs via [tabs.connect.]\n\n[extensionId] The ID of the extension/app you want to connect to. If\nomitted, default is your own extension.\n\nReturns:\nPort through which messages can be sent and received. The port's\n[][runtime.Port onDisconnect] event is fired if the extension/app does not\nexist.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"extensionId","id":"extensionId"},{"ref":{"name":"RuntimeConnectParams","refId":"chrome.runtime/RuntimeConnectParams"},"isOptional":true,"kind":"param","name":"connectInfo","id":"connectInfo"}],"line":"147"},{"returnType":{"name":"Port","refId":"chrome.runtime/Port"},"kind":"method","name":"connectNative","id":"connectNative1()","comment":"\nConnects to a native application in the host machine.\n\n[application] The name of the registered application to connect to.\n\nReturns:\nPort through which messages can be sent and received with the application\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"application","id":"application"}],"line":"161"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"sendMessage","id":"sendMessage3()","comment":"\nSends a single message to onMessage event listeners within the extension\n(or another extension/app). Similar to chrome.runtime.connect, but only\nsends a single message with an optional response. The [runtime.onMessage]\nevent is fired in each extension page of the extension. Note that\nextensions cannot send messages to content scripts using this method. To\nsend messages to content scripts, use [tabs.sendMessage.]\n\n[extensionId] The extension ID of the extension you want to connect to. If\nomitted, default is your own extension.\n\nReturns:\nThe JSON response object sent by the handler of the message. If an error\noccurs while connecting to the extension, the callback will be called with\nno arguments and [runtime.lastError] will be set to the error message.\n","children":[{"kind":"param","name":"message","id":"message"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"extensionId","id":"extensionId"},{"ref":{"name":"RuntimeSendMessageParams","refId":"chrome.runtime/RuntimeSendMessageParams"},"isOptional":true,"kind":"param","name":"options","id":"options"}],"line":"183"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"sendNativeMessage","id":"sendNativeMessage2()","comment":"\nSend a single message to a native application.\n\n[application] The name of the native messaging host.\n\n[message] The message that will be passed to the native messaging host.\n\nReturns:\nThe response message send by the native messaging host. If an error occurs\nwhile connecting to the native messaging host, the callback will be called\nwith no arguments and [runtime.lastError] will be set to the error message.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"application","id":"application"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"message","id":"message"}],"line":"203"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"kind":"method","name":"getPlatformInfo","id":"getPlatformInfo0()","comment":"\nReturns information about the current platform.\n","line":"214"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"DirectoryEntry","refId":"dart.dom.html/DirectoryEntry"}]},"kind":"method","name":"getPackageDirectoryEntry","id":"getPackageDirectoryEntry0()","comment":"\nReturns a DirectoryEntry for the package directory.\n","line":"225"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_throwNotAvailable","id":"_throwNotAvailable0()","isPrivate":true,"line":"340"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","line":"27"},{"ref":{"name":"LastErrorRuntime","refId":"chrome.runtime/LastErrorRuntime"},"kind":"property","name":"lastError","id":"lastError","comment":"\nThis will be defined during an API method callback if there was an error\n","line":"32"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"id","id":"id","comment":"\nThe ID of the extension/app.\n","line":"37"},{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"property","name":"onStartup","id":"onStartup","comment":"\nFired when a profile that has this extension installed first starts up.\nThis event is not fired when an incognito profile is started, even if this\nextension is operating in 'split' incognito mode.\n","line":"238"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"kind":"property","name":"onInstalled","id":"onInstalled","comment":"\nFired when the extension is first installed, when the extension is updated\nto a new version, and when Chrome is updated to a new version.\n","line":"247"},{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"property","name":"onSuspend","id":"onSuspend","comment":"\nSent to the event page just before it is unloaded. This gives the extension\nopportunity to do some clean up. Note that since the page is unloading, any\nasynchronous operations started while handling this event are not\nguaranteed to complete. If more activity for the event page occurs before\nit gets unloaded the onSuspendCanceled event will be sent and the page\nwon't be unloaded.\n","line":"260"},{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"property","name":"onSuspendCanceled","id":"onSuspendCanceled","comment":"\nSent after onSuspend to indicate that the app won't be unloaded after all.\n","line":"268"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"kind":"property","name":"onUpdateAvailable","id":"onUpdateAvailable","comment":"\nFired when an update is available, but isn't installed immediately because\nthe app is currently running. If you do nothing, the update will be\ninstalled the next time the background page gets unloaded, if you want it\nto be installed sooner you can explicitly call chrome.runtime.reload().\n","line":"279"},{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"property","name":"onBrowserUpdateAvailable","id":"onBrowserUpdateAvailable","comment":"\nFired when a Chrome update is available, but isn't installed immediately\nbecause a browser restart is required.\n","line":"288"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Port","refId":"chrome.runtime/Port"}]},"kind":"property","name":"onConnect","id":"onConnect","comment":"\nFired when a connection is made from either an extension process or a\ncontent script.\n","line":"297"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Port","refId":"chrome.runtime/Port"}]},"kind":"property","name":"onConnectExternal","id":"onConnectExternal","comment":"\nFired when a connection is made from another extension.\n","line":"305"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"OnMessageEvent","refId":"chrome.runtime/OnMessageEvent"}]},"kind":"property","name":"onMessage","id":"onMessage","comment":"\nFired when a message is sent from either an extension process or a content\nscript.\n","line":"314"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"OnMessageExternalEvent","refId":"chrome.runtime/OnMessageExternalEvent"}]},"kind":"property","name":"onMessageExternal","id":"onMessageExternal","comment":"\nFired when a message is sent from another extension/app. Cannot be used in\na content script.\n","line":"323"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"onRestartRequired","id":"onRestartRequired","comment":"\nFired when an app or the device that it runs on needs to be restarted. The\napp should close all its windows at its earliest convenient time to let the\nrestart to happen. If the app does nothing, a restart will be enforced\nafter a 24-hour grace period has passed. Currently, this event is only\nfired for Chrome OS kiosk apps.\n","line":"335"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_runtime","id":"_runtime","isPrivate":true,"line":"23"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController"},"isFinal":true,"kind":"variable","name":"_onStartup","id":"_onStartup","isPrivate":true,"line":"240"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"isFinal":true,"kind":"variable","name":"_onInstalled","id":"_onInstalled","isPrivate":true,"line":"249"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController"},"isFinal":true,"kind":"variable","name":"_onSuspend","id":"_onSuspend","isPrivate":true,"line":"262"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController"},"isFinal":true,"kind":"variable","name":"_onSuspendCanceled","id":"_onSuspendCanceled","isPrivate":true,"line":"270"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"isFinal":true,"kind":"variable","name":"_onUpdateAvailable","id":"_onUpdateAvailable","isPrivate":true,"line":"281"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController"},"isFinal":true,"kind":"variable","name":"_onBrowserUpdateAvailable","id":"_onBrowserUpdateAvailable","isPrivate":true,"line":"290"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"Port","refId":"chrome.runtime/Port"}]},"isFinal":true,"kind":"variable","name":"_onConnect","id":"_onConnect","isPrivate":true,"line":"299"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"Port","refId":"chrome.runtime/Port"}]},"isFinal":true,"kind":"variable","name":"_onConnectExternal","id":"_onConnectExternal","isPrivate":true,"line":"307"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"OnMessageEvent","refId":"chrome.runtime/OnMessageEvent"}]},"isFinal":true,"kind":"variable","name":"_onMessage","id":"_onMessage","isPrivate":true,"line":"316"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"OnMessageExternalEvent","refId":"chrome.runtime/OnMessageExternalEvent"}]},"isFinal":true,"kind":"variable","name":"_onMessageExternal","id":"_onMessageExternal","isPrivate":true,"line":"325"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"_onRestartRequired","id":"_onRestartRequired","isPrivate":true,"line":"337"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"25"}],"line":"22"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/gen/runtime.dart","line":"9"}