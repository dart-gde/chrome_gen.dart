{"dependencies":[{"kind":"library","id":"chrome.src.common_exp","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChromeEnum","id":"ChromeEnum","comment":"\nThe abstract superclass of Chrome enums.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"51"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"value","id":"value","line":"47"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"value","refId":"chrome.src.common_exp/ChromeEnum/value"},"kind":"param","name":"value","id":"value"}],"line":"49"}],"line":"46"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChromeApi","id":"ChromeApi","comment":"\nA common super class for the Chrome APIs.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","comment":"\nReturns true if the API is available. The common causes of an API not being\navilable are:\n\n * a permission is missing in the application's manifest.json file\n * the API is defined on a newer version of Chrome then the current runtime\n","line":"40"}],"line":"32"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChromeObject","id":"ChromeObject","comment":"\nThe abstract superclass of objects that can hold [JsObject] proxies.\n","children":[{"returnType":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"method","name":"toJs","id":"toJs0()","line":"24"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"26"},{"isFinal":true,"kind":"variable","name":"jsProxy","id":"jsProxy","line":"10"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreate a new instance of a `ChromeObject`, which creates and delegates to\na JsObject proxy.\n","line":"16"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","comment":"\nCreate a new instance of a `ChromeObject`, which delegates to the given\nJsObject proxy.\n","children":[{"initializedField":{"name":"jsProxy","refId":"chrome.src.common_exp/ChromeObject/jsProxy"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"22"}],"line":"9"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/src/common_exp.dart","line":"2"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"chrome.socket","comment":"\nUse the `chrome.socket` API to send and receive data over the network using\nTCP and UDP connections.\n","children":[{"returnType":{"name":"SocketType","refId":"chrome.socket/SocketType"},"kind":"method","name":"_createSocketType","id":"_createSocketType1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"483"},{"returnType":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"method","name":"_createArrayBuffer","id":"_createArrayBuffer1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"482"},{"returnType":{"name":"NetworkInterface","refId":"chrome.socket/NetworkInterface"},"kind":"method","name":"_createNetworkInterface","id":"_createNetworkInterface1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"481"},{"returnType":{"name":"SocketInfo","refId":"chrome.socket/SocketInfo"},"kind":"method","name":"_createSocketInfo","id":"_createSocketInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"480"},{"returnType":{"name":"AcceptInfo","refId":"chrome.socket/AcceptInfo"},"kind":"method","name":"_createAcceptInfo","id":"_createAcceptInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"479"},{"returnType":{"name":"RecvFromInfo","refId":"chrome.socket/RecvFromInfo"},"kind":"method","name":"_createRecvFromInfo","id":"_createRecvFromInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"478"},{"returnType":{"name":"SocketWriteInfo","refId":"chrome.socket/SocketWriteInfo"},"kind":"method","name":"_createWriteInfo","id":"_createWriteInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"477"},{"returnType":{"name":"SocketReadInfo","refId":"chrome.socket/SocketReadInfo"},"kind":"method","name":"_createReadInfo","id":"_createReadInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"476"},{"returnType":{"name":"CreateInfo","refId":"chrome.socket/CreateInfo"},"kind":"method","name":"_createCreateInfo","id":"_createCreateInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"475"},{"ref":{"name":"ChromeSocket","refId":"chrome.socket/ChromeSocket"},"isFinal":true,"kind":"variable","name":"socket","id":"socket","comment":"\nAccessor for the `chrome.socket` namespace.\n","line":"14"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"NetworkInterface","id":"NetworkInterface","children":[{"isSetter":true,"kind":"method","name":"name=","id":"name=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"469"},{"isSetter":true,"kind":"method","name":"address=","id":"address=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"472"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"468"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"address","id":"address","line":"471"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"address","id":"address"}],"line":"462"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"466"}],"line":"461"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"SocketInfo","id":"SocketInfo","children":[{"isSetter":true,"kind":"method","name":"socketType=","id":"socketType=1()","children":[{"ref":{"name":"SocketType","refId":"chrome.socket/SocketType"},"kind":"param","name":"value","id":"value"}],"line":"443"},{"isSetter":true,"kind":"method","name":"connected=","id":"connected=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"446"},{"isSetter":true,"kind":"method","name":"peerAddress=","id":"peerAddress=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"449"},{"isSetter":true,"kind":"method","name":"peerPort=","id":"peerPort=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"452"},{"isSetter":true,"kind":"method","name":"localAddress=","id":"localAddress=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"455"},{"isSetter":true,"kind":"method","name":"localPort=","id":"localPort=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"458"},{"ref":{"name":"SocketType","refId":"chrome.socket/SocketType"},"kind":"property","name":"socketType","id":"socketType","line":"442"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"connected","id":"connected","line":"445"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"peerAddress","id":"peerAddress","line":"448"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"peerPort","id":"peerPort","line":"451"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"localAddress","id":"localAddress","line":"454"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"localPort","id":"localPort","line":"457"},{"kind":"constructor","name":"","id":"6()","children":[{"ref":{"name":"SocketType","refId":"chrome.socket/SocketType"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketType","id":"socketType"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"connected","id":"connected"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"peerAddress","id":"peerAddress"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"peerPort","id":"peerPort"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"localAddress","id":"localAddress"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"localPort","id":"localPort"}],"line":"432"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"440"}],"line":"431"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"RecvFromInfo","id":"RecvFromInfo","children":[{"isSetter":true,"kind":"method","name":"resultCode=","id":"resultCode=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"419"},{"isSetter":true,"kind":"method","name":"data=","id":"data=1()","children":[{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"param","name":"value","id":"value"}],"line":"422"},{"isSetter":true,"kind":"method","name":"address=","id":"address=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"425"},{"isSetter":true,"kind":"method","name":"port=","id":"port=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"428"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"resultCode","id":"resultCode","line":"418"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"property","name":"data","id":"data","line":"421"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"address","id":"address","line":"424"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"port","id":"port","line":"427"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"resultCode","id":"resultCode"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"isOptional":true,"isNamed":true,"kind":"param","name":"data","id":"data"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"address","id":"address"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"port","id":"port"}],"line":"410"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"416"}],"line":"409"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"SocketWriteInfo","id":"SocketWriteInfo","children":[{"isSetter":true,"kind":"method","name":"bytesWritten=","id":"bytesWritten=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"406"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bytesWritten","id":"bytesWritten","line":"405"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"bytesWritten","id":"bytesWritten"}],"line":"400"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"403"}],"line":"399"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"SocketReadInfo","id":"SocketReadInfo","children":[{"isSetter":true,"kind":"method","name":"resultCode=","id":"resultCode=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"393"},{"isSetter":true,"kind":"method","name":"data=","id":"data=1()","children":[{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"param","name":"value","id":"value"}],"line":"396"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"resultCode","id":"resultCode","line":"392"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"property","name":"data","id":"data","line":"395"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"resultCode","id":"resultCode"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"isOptional":true,"isNamed":true,"kind":"param","name":"data","id":"data"}],"line":"386"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"390"}],"line":"385"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"AcceptInfo","id":"AcceptInfo","children":[{"isSetter":true,"kind":"method","name":"resultCode=","id":"resultCode=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"379"},{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"382"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"resultCode","id":"resultCode","line":"378"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"381"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"resultCode","id":"resultCode"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"}],"line":"372"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"376"}],"line":"371"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"CreateInfo","id":"CreateInfo","children":[{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"368"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"367"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"}],"line":"362"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"365"}],"line":"361"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"CreateOptions","id":"CreateOptions","comment":"\nThe socket options.\n","children":[{"kind":"constructor","name":"","id":"0()","line":"357"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"358"}],"line":"356"},{"superclass":{"name":"ChromeEnum","refId":"chrome.src.common_exp/ChromeEnum"},"kind":"class","name":"SocketType","id":"SocketType","children":[{"ref":{"name":"SocketType","refId":"chrome.socket/SocketType"},"isStatic":true,"kind":"variable","name":"TCP","id":"TCP","line":"345"},{"ref":{"name":"SocketType","refId":"chrome.socket/SocketType"},"isStatic":true,"kind":"variable","name":"UDP","id":"UDP","line":"346"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"SocketType","refId":"chrome.socket/SocketType"}]},"isStatic":true,"kind":"variable","name":"VALUES","id":"VALUES","line":"348"},{"kind":"constructor","name":"_","id":"_1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"isPrivate":true,"line":"350"}],"line":"344"},{"superclass":{"name":"ChromeApi","refId":"chrome.src.common_exp/ChromeApi"},"kind":"class","name":"ChromeSocket","id":"ChromeSocket","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"CreateInfo","refId":"chrome.socket/CreateInfo"}]},"kind":"method","name":"create","id":"create2()","comment":"\nCreates a socket of the specified type that will connect to the specified\nremote machine.\n[type]: The type of socket to create. Must be `tcp` or `udp`.\n[options]: The socket options.\n[callback]: Called when the socket has been created.\n","children":[{"ref":{"name":"SocketType","refId":"chrome.socket/SocketType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"CreateOptions","refId":"chrome.socket/CreateOptions"},"isOptional":true,"kind":"param","name":"options","id":"options"}],"line":"30"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"destroy","id":"destroy1()","comment":"\nDestroys the socket. Each socket created should be destroyed after use.\n[socketId]: The socketId.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"42"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"connect","id":"connect3()","comment":"\nConnects the socket to the remote machine (for a `tcp` socket). For a `udp`\nsocket, this sets the default address which packets are sent to and read\nfrom for `read()` and `write()` calls.\n[socketId]: The socketId.\n[hostname]: The hostname or IP address of the remote machine.\n[port]: The port of the remote machine.\n[callback]: Called when the connection attempt is complete.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"hostname","id":"hostname"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"}],"line":"57"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"bind","id":"bind3()","comment":"\nBinds the local address for socket. Currently, it does not support TCP\nsocket.\n[socketId]: The socketId.\n[address]: The address of the local machine.\n[port]: The port of the local machine.\n[callback]: Called when the bind attempt is complete.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"}],"line":"73"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"disconnect","id":"disconnect1()","comment":"\nDisconnects the socket. For UDP sockets, `disconnect` is a non-operation\nbut is safe to call.\n[socketId]: The socketId.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"86"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketReadInfo","refId":"chrome.socket/SocketReadInfo"}]},"kind":"method","name":"read","id":"read2()","comment":"\nReads data from the given connected socket.\n[socketId]: The socketId.\n[bufferSize]: The read buffer size.\n[callback]: Delivers data that was available to be read without blocking.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"bufferSize","id":"bufferSize"}],"line":"98"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketWriteInfo","refId":"chrome.socket/SocketWriteInfo"}]},"kind":"method","name":"write","id":"write2()","comment":"\nWrites data on the given connected socket.\n[socketId]: The socketId.\n[data]: The data to write.\n[callback]: Called when the write operation completes without blocking or\nan error occurs.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"param","name":"data","id":"data"}],"line":"113"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RecvFromInfo","refId":"chrome.socket/RecvFromInfo"}]},"kind":"method","name":"recvFrom","id":"recvFrom2()","comment":"\nReceives data from the given UDP socket.\n[socketId]: The socketId.\n[bufferSize]: The receive buffer size.\n[callback]: Returns result of the recvFrom operation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"bufferSize","id":"bufferSize"}],"line":"127"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketWriteInfo","refId":"chrome.socket/SocketWriteInfo"}]},"kind":"method","name":"sendTo","id":"sendTo4()","comment":"\nSends data on the given UDP socket to the given address and port.\n[socketId]: The socketId.\n[data]: The data to write.\n[address]: The address of the remote machine.\n[port]: The port of the remote machine.\n[callback]: Called when the send operation completes without blocking or an\nerror occurs.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"param","name":"data","id":"data"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"}],"line":"144"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"listen","id":"listen4()","comment":"\nThis method applies to TCP sockets only. Listens for connections on the\nspecified port and address. This effectively makes this a server socket,\nand client socket functions (connect, read, write) can no longer be used on\nthis socket.\n[socketId]: The socketId.\n[address]: The address of the local machine.\n[port]: The port of the local machine.\n[backlog]: Length of the socket's listen queue.\n[callback]: Called when listen operation completes.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"backlog","id":"backlog"}],"line":"163"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"AcceptInfo","refId":"chrome.socket/AcceptInfo"}]},"kind":"method","name":"accept","id":"accept1()","comment":"\nThis method applies to TCP sockets only. Registers a callback function to\nbe called when a connection is accepted on this listening server socket.\nListen must be called first. If there is already an active accept callback,\nthis callback will be invoked immediately with an error as the resultCode.\n[socketId]: The socketId.\n[callback]: The callback is invoked when a new socket is accepted.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"179"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"setKeepAlive","id":"setKeepAlive3()","comment":"\nEnables or disables the keep-alive functionality for a TCP connection.\n[socketId]: The socketId.\n[enable]: If true, enable keep-alive functionality.\n[delay]: Set the delay seconds between the last data packet received and\nthe first keepalive probe. Default is 0.\n[callback]: Called when the setKeepAlive attempt is complete.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"enable","id":"enable"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"delay","id":"delay"}],"line":"195"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"setNoDelay","id":"setNoDelay2()","comment":"\nSets or clears `TCP_NODELAY` for a TCP connection. Nagle's algorithm will\nbe disabled when `TCP_NODELAY` is set.\n[socketId]: The socketId.\n[noDelay]: If true, disables Nagle's algorithm.\n[callback]: Called when the setNoDelay attempt is complete.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"noDelay","id":"noDelay"}],"line":"210"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketInfo","refId":"chrome.socket/SocketInfo"}]},"kind":"method","name":"getInfo","id":"getInfo1()","comment":"\nRetrieves the state of the given socket.\n[socketId]: The socketId.\n[callback]: Called when the state is available.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"223"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"NetworkInterface","refId":"chrome.socket/NetworkInterface"}]}]},"kind":"method","name":"getNetworkList","id":"getNetworkList0()","comment":"\nRetrieves information about local adapters on this system.\n[callback]: Called when local adapter information is available.\n","line":"235"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"joinGroup","id":"joinGroup2()","comment":"\nJoin the multicast group and start to receive packets from that group. The\nsocket must be of UDP type and must be bound to a local port before calling\nthis method.\n[socketId]: The socketId.\n[address]: The group address to join. Domain names are not supported.\n[callback]: Called when the join group operation is done with an integer\nparameter indicating the platform-independent error code.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"}],"line":"252"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"leaveGroup","id":"leaveGroup2()","comment":"\nLeave the multicast group previously joined using `joinGroup`. It's not\nnecessary to leave the multicast group before destroying the socket or\nexiting. This is automatically called by the OS.\n\nLeaving the group will prevent the router from sending multicast datagrams\nto the local host, presuming no other process on the host is still joined\nto the group.\n\n[socketId]: The socketId.\n[address]: The group address to leave. Domain names are not supported.\n[callback]: Called when the leave group operation is done with an integer\nparameter indicating the platform-independent error code.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"}],"line":"274"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"setMulticastTimeToLive","id":"setMulticastTimeToLive2()","comment":"\nSet the time-to-live of multicast packets sent to the multicast group.\n\nCalling this method does not require multicast permissions.\n\n[socketId]: The socketId.\n[ttl]: The time-to-live value.\n[callback]: Called when the configuration operation is done.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"ttl","id":"ttl"}],"line":"291"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"setMulticastLoopbackMode","id":"setMulticastLoopbackMode2()","comment":"\nSet whether multicast packets sent from the host to the multicast group\nwill be looped back to the host.\n\nNote: the behavior of `setMulticastLoopbackMode` is slightly different\nbetween Windows and Unix-like systems. The inconsistency happens only when\nthere is more than one application on the same host joined to the same\nmulticast group while having different settings on multicast loopback mode.\nOn Windows, the applications with loopback off will not RECEIVE the\nloopback packets; while on Unix-like systems, the applications with\nloopback off will not SEND the loopback packets to other applications on\nthe same host. See MSDN: http://goo.gl/6vqbj\n\nCalling this method does not require multicast permissions.\n\n[socketId]: The socketId.\n[enabled]: Indicate whether to enable loopback mode.\n[callback]: Called when the configuration operation is done.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"enabled","id":"enabled"}],"line":"318"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"kind":"method","name":"getJoinedGroups","id":"getJoinedGroups1()","comment":"\nGet the multicast group addresses the socket is currently joined to.\n[socketId]: The socketId.\n[callback]: Called with an array of strings of the result.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"331"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_throwNotAvailable","id":"_throwNotAvailable0()","isPrivate":true,"line":"339"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","line":"21"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_socket","id":"_socket","isPrivate":true,"line":"17"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"19"}],"line":"16"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome_gen.dart/lib/gen/socket.dart","line":"7"}